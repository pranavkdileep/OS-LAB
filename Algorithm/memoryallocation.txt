Algorithm Description:

1. Start
2. Define a struct for process with attributes: pid, size, allocated
3. Define a struct for block with attributes: bid, size, allocated
4. Define a function firstfit(po[], bo[], n, m) to implement first fit algorithm:
   4.1. Initialize local arrays of structs for processes and blocks.
   4.2. Copy elements from input arrays to local arrays.
   4.3. Output "First Fit"
   4.4. Iterate over each process:
        4.4.1. Iterate over each block:
               4.4.1.1. If process size is less than or equal to block size and block is not allocated:
                         4.4.1.1.1. Mark block as allocated.
                         4.4.1.1.2. Mark process as allocated.
                         4.4.1.1.3. Output the allocation details.
                         4.4.1.1.4. Break the loop.
        4.4.2. If process is not allocated, output "Process P(pid) is not allocated".
5. Define a function bestfit(po[], bo[], n, m) to implement best fit algorithm:
   5.1. Initialize local arrays of structs for processes and blocks.
   5.2. Copy elements from input arrays to local arrays.
   5.3. Output "Best Fit"
   5.4. Sort the blocks array based on size in ascending order.
   5.5. Iterate over each process:
        5.5.1. Iterate over each block:
               5.5.1.1. If process size is less than or equal to block size and block is not allocated:
                         5.5.1.1.1. Mark block as allocated.
                         5.5.1.1.2. Mark process as allocated.
                         5.5.1.1.3. Output the allocation details.
                         5.5.1.1.4. Break the loop.
        5.5.2. If process is not allocated, output "Process P(pid) is not allocated".
6. Define a function worstfit(po[], bo[], n, m) to implement worst fit algorithm:
   6.1. Initialize local arrays of structs for processes and blocks.
   6.2. Copy elements from input arrays to local arrays.
   6.3. Output "Worst Fit"
   6.4. Sort the blocks array based on size in descending order.
   6.5. Iterate over each process:
        6.5.1. Iterate over each block:
               6.5.1.1. If process size is less than or equal to block size and block is not allocated:
                         6.5.1.1.1. Mark block as allocated.
                         6.5.1.1.2. Mark process as allocated.
                         6.5.1.1.3. Output the allocation details.
                         6.5.1.1.4. Break the loop.
        6.5.2. If process is not allocated, output "Process P(pid) is not allocated".
7. Define the main function:
   7.1. Declare variables n and m for number of processes and blocks respectively.
   7.2. Declare arrays of structs for processes and blocks.
   7.3. Input the number of processes and blocks from the user.
   7.4. Input the size of each process and block from the user.
   7.5. Call firstfit function with process and block arrays, n, and m as arguments.
   7.6. Call bestfit function with process and block arrays, n, and m as arguments.
   7.7. Call worstfit function with process and block arrays, n, and m as arguments.
8. End
